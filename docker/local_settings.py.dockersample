from project.settings.base import *

#################################
#
#   Sample local_settings to run with docker
#
#################################
DEBUG = True

# debug toolbar settings
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_COLLAPSED': True,
}

USE_DEBUG_TOOLBAR = False #Broken

if USE_DEBUG_TOOLBAR:
    MIDDLEWARE_CLASSES.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware',)

SECRET_KEY = 'something super secret'

if 'DB_NAME' in os.environ:
    # Running the Docker image
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['DB_NAME'],
            'USER': os.environ['DB_USER'],
            'PASSWORD': os.environ['DB_PASS'],
            'HOST': os.environ['DB_SERVICE'],
            'PORT': os.environ['DB_PORT']
        }
    }
else:
    # Building the Docker image
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(REPO_DIR, 'db.sqlite3'),
        }
    }

ALLOWED_HOSTS = ["*"]
DEFAULT_HOST = 'https://localhost:8000'

# Uncomment next line to enable test account
#TEST_USER_PASSWORD="something secret"

# settings for file uploads
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

MEDIA_ROOT = os.path.join(REPO_DIR, 'project', 'media')

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

MAIL_DEFAULT_SENDER = "admin@localhost"
VOICEMAIL_NOTIFICATION_EMAIL = 'youremail@example.horse'
PARTNERSHIPS_LEAD_INBOX = 'anotheremail@example.space'

DIVERT_REMOTE_CONNECTIONS = True

# specific to intake.translators.clean_slate.translator
TEST_PDF_PATH = "./CleanSlateCombined.pdf"

MIXPANEL_KEY = '12345'

TWILIO_AUTH_TOKEN = '12345'


COMPRESS_OFFLINE = False
CELERY_TASK_ALWAYS_EAGER = True
CELERY_BROKER_URL = 'amqp://localhost'


BROWSER_STACK_ID = 'username'
BROWSER_STACK_KEY = 'insert key here'

COMPRESS_ROOT = os.path.join(REPO_DIR, 'staticfiles')
COMPRESS_OFFLINE = True


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'loggers': {
        'project': {
            'handlers': ['console'],
            'level': 'WARNING',
        },
    },
}
